---
title: "Introduction to Prompt Engineering"
subtitle: "*How to get your LLM to do what you want*"
author: "Alex van Vorstenbosch"
footer: "Prompt Engineering"
title-slide-attributes:
    data-background-image: "./figures/prompt-engineering.png"
    data-background-opacity: "0.5"

date: "11-17-2023"
---

## Overview
::: {.nonincremental}
- Introduction to Prompting
- Best techniques for prompting
:::

## Overview
::: {.nonincremental}
- <span class="highlighted-text">Introduction to Prompting</span>
- Best techniques for prompting
:::

# Introduction to prompting

## Introduction to prompting
- Prompts are a <span class="highlighted-text">natural (language)</span> way to interact with language models
    - very easy to understand
    - anybody can do it
    - it makes the interaction feel <span class="highlighted-text"> human </span>
- Enables <span class="highlighted-text">Semantic coding</span> instead of <span class="highlighted-text">logical coding</span>
- This makes it very easy and very fast to iterate

## NLP-lifecycle on it's head

\
Regular ML:\
Problem &rarr; Idea &rarr; Gather data &rarr; Train Model &rarr; Evaluate Model &rarr;\
<span class="highlighted-text">Repeat if neccessary</span> &rarr; deploy\
Duration: Months\
\
\

Prompting workflow:\
Problem &rarr; Idea &rarr; Gather (less) data &rarr; Finetune prompt &rarr; Evaluate Model &rarr;\
<span class="highlighted-text">Repeat if neccessary</span> &rarr; already deployed\
Duration: Days

## Overview
::: {.nonincremental}
- <span class="highlighted-text">Introduction to Prompting</span>
- Best techniques for prompting
:::

## Overview
::: {.nonincremental}
- Introduction to Prompting
- <span class="highlighted-text">Best techniques for prompting</span>
:::

# Best techniques for prompting

## Best techniques for prompting

- Make use of a general prompting template 
- Be precise in your description
- 'No' is also an answer
- Use delimiters to mark sections of your prompt
- Give LLMs room to think
- Take into account the order of operations 
- Guide complex problems with chain-of-thought prompting
- Split tasks into simpler subtasks
- Mind the Context Window

## General prompting template
- A general decent prompt templates looks like the following:
- Specify which ROLE the model should assume.
- Specify the task it should perform:
    - TASK_DESCRIPTION: What is the task.
    - TASK_SPECIFICATION: Specify how the task should be performed
    - FORMAT_OUTPUT: (Optional) Specify how the answer should be given.
```{python}
#| eval: false
#| echo: true
#| output: false
#| code-line-numbers: "|2|3|4|5"
f"""
ROLE: {ROLE}
TASK: {TASK_DESCRIPTION}
      {TASK_SPECIFICATION}
      {FORMAT_OUTPUT} 
"""
```

## General prompting template
::: {.columns}
::: {.column width="60%"}
- A general decent prompt templates looks like the following:
- Specify which ROLE the model should assume.
- Specify the task it should perform:
    - TASK_DESCRIPTION: What is the task.
    - TASK_SPECIFICATION: Specify how the task should be performed
    - FORMAT_OUTPUT: (Optional) Specify how the answer should be given.
- Don't take the role too far: You might go '*out-of-distribution*'
:::

::: {.column width="40%"}
<iframe src="https://chat.openai.com/share/aec332f7-d4fc-40fd-b203-d15458880610" class="iframe-chatgpt"></iframe>
:::
:::

## Be precise in your task descriptions

You may think your task is clear, but it may not be:

::: {.columns}
::: {.column width="25%"}
 
:::

::: {.column width="50%"}

*As I'm going to the store, my roommate asks me:*
*'Can you get a gallon of milk? And if they have eggs, get 6.'*

*When I come home my roommate was in shock: "You got 6 gallons of milk?!"*
*I responded 'They had eggs.'*

:::

::: {.column width="25%"}
 
:::
:::


## Be precise in your task descriptions
- LLMs don't know anything about you or the task it is given.
- "Please explain to me how LLMs works?"
    - What is your background knowledge? Academic, high-school, etc..
    - What type of explanation? Technical, simple summary, etc..
    - How long should it be? 5 paragraphs, 5 sentences, etc..
    - Do you need references? 
    - etc... 

## Use delimiters

- Indicates what describes the task at hand, and what the task should be performed on
- use either: 
    - *### TEXT ###* 
    - *""" TEXT """* 
    - *''' TEXT '''* 
    - These triplets are all a single token
- Or use clear section titles, HTML-tags, etc.

## Include a reference text
::: {.columns}
::: {.column width="60%"}
- LLMs should not be trusted with giving specific information, they can make up completely nonsence answers
- These answers are called <span class="highlighted-text">Hallucinations</span>, more on them later.
:::
::: {.column width="40%"}
<iframe class="iframe-chatgpt" src="https://chat.openai.com/share/49872740-604f-4b27-a844-002eff6743a9"></iframe>
:::
:::

## Include a reference text
- To help mitigate this (partially), you can Include a reference text^[[OpenAI GPT guide](https://platform.openai.com/docs/guides/gpt-best-practices/strategy-provide-reference-text)]
```{python}
#| eval: false
#| echo: true
#| output: false
f"""
ROLE: {ROLE}
TASK: {TASK_DESCRIPTION}
      Your task is to answer the question using only the provided document 
      and to cite the passage(s) of the document used to answer the question.
      The answer must be annotated with a citation. 
      Use the following format to cite relevant passages ({'citation' : …}).
      {FORMAT_OUTPUT}

DOCUMENT:
'''
{DOCUMENT}
'''
"""
```

## 'No' is also an answer! 
- To help mitigate this (partially), you can Include a reference text^[[OpenAI GPT guide](https://platform.openai.com/docs/guides/gpt-best-practices/strategy-provide-reference-text)]
- Explicitly tell the model to not answer the question if it can't.
```{python}
#| eval: false
#| echo: true
#| output: false
#| code-line-numbers: "|6-9"
f"""
ROLE: {ROLE}
TASK: {TASK_DESCRIPTION}
      Your task is to answer the question using only the provided document 
      and to cite the passage(s) of the document used to answer the question.
      If the document does not contain the information needed to answer this question 
      then simply write: 
        'Insufficient information.' 
      If an answer to the question is provided, it must be annotated with a citation. 
      Use the following format to cite relevant passages ({'citation' : …}).
      {FORMAT_OUTPUT}

DOCUMENT:
'''
{DOCUMENT}
'''
"""
```

## Give models time-to-think {.smaller}
```{.python}
f"""
Determine if my answer below is correct.

I'm trying to figure out how expensive my prompting of the GPT4 API will be in total.
I'm going to run around 1000 prompts. For these prompts, the average prompt-lengt is 250 words.
The average response length of the model for these prompts is 300 words. 

The API pricing is as follows:
$0.03/1k prompt tokens.
$0.06/1k sampled tokens.

We can assume that 1 token is on average 3/4th of a single word. 

I found the following answer:
18 dollars.
"""
```

```{.python code-line-numbers="|2-4"}
f"""
First work out your own solution to the problem. 
Then compare your solution to the given solution and evaluate if the given solution is correct or not. 
Don't decide if the student's solution is correct until you have done the problem yourself.

I'm trying to figure out how expensive my prompting of the GPT4 API will be in total.
I'm going to run around 1000 prompts. For these prompts, the average prompt-lengt is 250 words.
The average response length of the model for these prompts is 300 words. 

The API pricing is as follows:
$0.03/1k prompt tokens.
$0.06/1k sampled tokens.

We can assume that 1 token is on average 3/4th of a single word. 

I found the following answer:
18 dollars.
"""
```


## Take into account the order-of-operations {.smaller}
- First give calculation steps, then give the answer.
- Otherwise the model tries to retrofit the computation to the answer.

::: {.columns}
::: {.column width="50%"}
::: {style="text-align: center"}
**Bad order**
:::
<iframe style="width:100%; height:800px;" class="iframe-chatgpt" src="https://chat.openai.com/share/a1c44c6d-a815-421a-bb2d-eb999cc250db"></iframe>

:::
::: {.column width="50%"}
::: {style="text-align: center"}
**Good order**
:::
<iframe style="width:100%; height:800px;" class="iframe-chatgpt" src="https://chat.openai.com/share/0e0d9797-f300-4d88-9cee-d954fbae6108"></iframe>

:::

:::

## Chain-of-thought prompting {.smaller}

- Some tasks are complicated for a LLM, based on just the prompt
- Give the model room to think with Chain-of-Thought prompting
- Chain-of-Thought prompting is essentially single or few-shot prompting for reasoning.
- What was few-shot prompting again?

**Input**\
*Poor English input: I eated the purple berries.*\
*Good English output: I ate the purple berries.*\
*Poor English input: Thank you for picking me as your designer. I’d appreciate it.*\
*Good English output: Thank you for choosing me as your designer. I appreciate it.*\
*Poor English input: The mentioned changes have done. or I did the alteration that you*\
*requested. or I changed things you wanted and did the modifications.*\
*Good English output:*\
**output**\
The requested changes have been made. or I made the alteration that you*
*requested. or I changed things you wanted and made the modifications.^[Language Models are Few-Shot Learners: [https://arxiv.org/pdf/2005.14165.pdf](https://arxiv.org/pdf/2005.14165.pdf)]

- That this works, is one of the emergent properties of LLMs

## Chain-of-thought prompting {.smaller}

- Some tasks are complicated for a LLM, based on just the prompt
- Give the model room to think with Chain-of-Thought prompting
- Chain-of-Thought prompting is essentially single or few-shot prompting for reasoning.
- Chain-of-Thought prompting demonstrates how to reason^[Chain-of-Thought Prompting Elicits Reasoning
in Large Language Models[https://arxiv.org/pdf/2201.11903.pdf
](https://arxiv.org/pdf/2201.11903.pdf
)]:

![](./figures/chain-of-thought-prompting.png)

## 0-shot Chain-of-thought prompting
You can already improve performance by just adding:\
<span class="highlighted-text"> "Let's think step by step." </span>\
at the end of a prompt^[Large Language Models are Zero-Shot Reasoners[https://arxiv.org/pdf/2205.11916.pdf](https://arxiv.org/pdf/2205.11916.pdf)]


