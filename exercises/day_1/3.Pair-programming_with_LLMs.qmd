---
title: "Pair-programming with LLMs"
format: 
    pdf:
        number-sections: true
header-includes:
  - \usepackage{fancyhdr}
  - \usepackage{color}
  - \usepackage[framemethod=TikZ]{mdframed}
  - \usepackage{graphicx}
  - \usepackage{background}
  - \usepackage{fontspec}
  - \usepackage{fvextra} % provides extra options for verbatim environments
  - \DefineVerbatimEnvironment{Highlighting}{Verbatim}{commandchars=\\\{\}, fontsize=\scriptsize}
  - \setmainfont{Arial}
  - \fancyhead[C]{\textbf{Pair-programming with LLMs}}
  - \fancyhead[R]{\thepage}
  - \fancyhead[L]{\ }
  - \fancyfoot[L]{Februari, 2025}
  - \fancyfoot[C]{ }
  - \fancyfoot[R]{\thepage}
  - \pagestyle{fancy}
  - \renewcommand{\headrulewidth}{0.4pt}
  - \renewcommand{\footrulewidth}{0.4pt}
  - \definecolor{shadecolor}{RGB}{204, 230, 255}
  - \definecolor{greyline}{RGB}{225, 225, 225}
  - \mdfdefinestyle{mystyle}{
      backgroundcolor=shadecolor, 
      roundcorner=10pt,
      linecolor=greyline, 
      linewidth=1pt,
      innertopmargin=10pt,
      innerbottommargin=0pt,
      innerrightmargin=0pt,
      innerleftmargin=10pt}
  - \backgroundsetup{
      scale=2.5,
      color=black,
      opacity=0.7,
      angle=0,
      position=current page.south west,
      vshift=6cm,
      hshift=-3cm,
      contents={
        \includegraphics[width=8cm,keepaspectratio]{../../slides/day_1/figures/banner.png}
        }
      }
---

\section*{Google Colab}
You can make these exercises using the general [google colab notebook](https://colab.research.google.com/github/avvorstenbosch/Masterclass-LLMs-for-Data-Science/blob/main/exercises/day_1/Google_Colab_General_notebook_for_assignments.ipynb).
Please take a few minutes to read through the notebook to familiarize yourself with the environment.


# Exercise: Explaining code

For this exercise, please begin by deciding which coding language you are most proficient in \texttt{Python} or \texttt{R}, so you can work with the other one:

-   If you chose \texttt{R}:

    Check out the code under `./data/code.py`, and the data under `./data/input-data-script.txt`
    Can you figure out what is going on here, what is the code doing?
    Try asking your LLM what the code is doing. 

-   If you chose \texttt{Python}:

    Check out the code under `./data/code.R`, and the data under `./data/input-data-script.txt`
    Can you figure out what is going on here, what is the code doing?
    Try asking your LLM what the code is doing. 

This is an example of a complex task where bigger models tend to work a lot better than smaller models.

**Answer**
\rotatebox{180}{\href{https://adventofcode.com/2021/day/4}{This code is a solution to a Bingo puzzle on Advent of Code 2021 - day 4}}

In the next sections we are going to keep working with this code

## Exercise: Document code
Part of the reason why this code was so hard to read was that it was written without documentation.
We're going to fix that. Use your LLM to help you write decent documentation for your file of choice. 
Adjust the file accordingly, this will be needed for the next section.

## Exercise: Translation between code languages
While it is fun to work in a different language, we prefer to work in the language we know best. 
Use your LLM to help you translate the code to your language of choice. 

\textcolor{red}{Don't blindly run code generated by LLMs, make sure you understand what is going on!}
For this toy example the risks are very low, but it's best to make this a habbit from the start. 

Tips:

- Doing this per section of the code makes it easier

- The answer it should generate is giving below, use this as your unit test:\
 \rotatebox{180}{`The winner is board 7 with a score of 53217!`}
 

## Exercise (optional): Generate unit-test
We are gong to optimize the code you translated from language A to language B.
Here we need to be a bit more carefull if nothing breaks by editing the code. 
Use your LLM to write unittests for the following:

- Does reading the data give the expected result?
- Does drawing a number do what we expect? 
- Does return_winner detect a win?

## Exercise (optional): Optimize the code
Use your LLM to see if there are any parts of your code that can be optimized.
I suggest doing this per section to make sure the LLM remains focussed on the relevant parts. 

\newpage
# Exercise: (Challenge) Generating code 
Try to solve part 2 of the puzzle on:
\href{https://adventofcode.com/2021/day/4}{https://adventofcode.com/2021/day/4}

**Answer**
\rotatebox{180}{The answer to the second part of the puzzle for our input should be 2776 with board 34.}

Your code should now solve for the puzzle inputs of Advent-of-Code day 4 2021 as a second check.
 
# Exercise: (Challenge) Generating code
See if you can also get the solution to the second part for the language that wasn't your first choice!