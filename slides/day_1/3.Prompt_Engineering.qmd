---
title: "Introduction to Prompt Engineering"
subtitle: "*How to get your LLM to do what you want*"
author: "Alex van Vorstenbosch"
footer: "Prompt Engineering"
title-slide-attributes:
    data-background-image: "./figures/prompt-engineering.png"
    data-background-opacity: "0.5"


---

## Overview
::: {.nonincremental}
- Introduction to Prompting
- Best techniques for prompting
:::

## Overview
::: {.nonincremental}
- <span class="highlighted-text">Introduction to Prompting</span>
- Best techniques for prompting
:::

# Introduction to prompting

## Introduction to prompting
- Prompts are a <span class="highlighted-text">natural (language)</span> way to interact with language models
    - very easy to understand
    - anybody can do it
    - it makes the interaction feel <span class="highlighted-text"> human </span>
- Enables <span class="highlighted-text">Semantic coding</span> instead of <span class="highlighted-text">logical coding</span>
- This makes it very easy and very fast to iterate

## NLP-lifecycle on it's head

\
Regular ML:\
Problem &rarr; Idea &rarr; Gather data &rarr; Train Model &rarr; Evaluate Model &rarr;\
<span class="highlighted-text">Repeat if neccessary</span> &rarr; deploy\
Duration: Months\
\
\

Prompting workflow:\
Problem &rarr; Idea &rarr; Gather (less) data &rarr; Finetune prompt &rarr; Evaluate Model &rarr;\
<span class="highlighted-text">Repeat if neccessary</span> &rarr; already deployed\
Duration: Days

## Overview
::: {.nonincremental}
- <span class="highlighted-text">Introduction to Prompting</span>
- Best techniques for prompting
:::

## Overview
::: {.nonincremental}
- Introduction to Prompting
- <span class="highlighted-text">Best techniques for prompting</span>
:::

# Best techniques for prompting

## Best techniques for prompting

- Make use of a general prompting template such as <span class="highlighted-text">RTF</span>
- <span class="highlighted-text">Be precise</span> in your description
- include a <span class="highlighted-text">reference text</span> 
- <span class="highlighted-text">'No'</span> is also an answer
- Give LLMs <span class="highlighted-text">room to think</span>
- Guide complex problems with <span class="highlighted-text">chain-of-thought prompting</span>
- Mind the <span class="highlighted-text">Context Window!</span>

## General prompting template - RTF framework
- A general decent prompt templates looks like the following:
- Specify which <span class="highlighted-text">ROLE</span> the model should assume.
- Specify the <span class="highlighted-text">TASK</span> it should perform:
    - TASK_DESCRIPTION: What is the task.
    - TASK_SPECIFICATION: Specify how the task should be performed
- (Optional) Specify in what <span class="highlighted-text">FORMAT</span> the answer should be given.
```{python}
# | eval: false
# | echo: true
# | output: false
# | code-line-numbers: "|2|3|4|5"
f"""
ROLE: {ROLE: You are a professional translator.}
TASK: {TASK_DESCRIPTION: Translate the user input from English to Dutch.}
      {TASK_SPECIFICATION: Make sure you only use formal language that is suitable for a business setting.}
      {FORMAT_OUTPUT: Only return the translated text, nothing else} 
"""
```


## General prompting template
::: {.columns}
::: {.column width="60%"}
::: {.nonincremental}
- A general decent prompt templates looks like the following:
- Specify which <span class="highlighted-text">ROLE</span> the model should assume.
- Specify the <span class="highlighted-text">TASK</span> it should perform:
    - TASK_DESCRIPTION: What is the task.
    - TASK_SPECIFICATION: Specify how the task should be performed
- (Optional) Specify in what <span class="highlighted-text">FORMAT</span> the answer should be given.
:::
:::

::: {.column width="40%"}
<iframe src="./webpages/Prompt Engineering in NLP.html" class="iframe-chatgpt"></iframe>
:::
:::

## Be precise in your task descriptions

You may think your task is clear, but it may not be:

::: {.columns}
::: {.column width="25%"}
 
:::

::: {.column width="50%"}

*As I'm going to the store, my roommate asks me:*
*'Can you get a gallon of milk? And if they have eggs, get 6.'*

*When I come home my roommate was in shock: "You got 6 gallons of milk?!"*
*I responded 'They had eggs.'*

:::

::: {.column width="25%"}
 
:::
:::


## Be precise in your task descriptions
- LLMs don't know anything about you or the task it is given.
- Give the model <span class="highlighted-text">the context</span> it needs to know 
- "Please explain to me how LLMs works?"
    - What is your background knowledge? Academic, high-school, etc..
    - How would you like the explanation? Technical, simple summary, funny, etc..
    - How long should it be? 5 sentences, 5 paragraphs, 5 pages etc..
    - Do you want the model to answer with or without the mathemathical foundations?
    - Do you need references? 
    - etc... 

## Include a reference text
::: {.columns}
::: {.column width="60%"}
- LLMs should not be trusted with giving specific information, they can make up completely nonsence answers
- These answers are called <span class="highlighted-text">Hallucinations</span>, more on them later.
:::
::: {.column width="40%"}
<iframe class="iframe-chatgpt" src="./webpages/hallucination2.html"></iframe>
:::
:::

## Include a reference text
- To help mitigate this (partially), you can Include a reference text^[[OpenAI GPT guide](https://platform.openai.com/docs/guides/gpt-best-practices/strategy-provide-reference-text)]
    - Note: Finding these reference texts in a smart way, is essentially what RAG systems do
```{python}
#| eval: false
#| echo: true
#| output: false
f"""
ROLE: {ROLE}
TASK: {TASK_DESCRIPTION}
      Your task is to answer the question using only the provided document 
      and to cite the passage(s) of the document used to answer the question.
      The answer must be annotated with a citation. 
      Use the following format to cite relevant passages ({'citation' : …}).
      {FORMAT_OUTPUT}

DOCUMENT:
'''
{DOCUMENT}
'''
"""
```

## Use delimiters

- Indicates what describes the task at hand, and what the task should be performed on
- use either: 
    - *### TEXT ###* 
    - *""" TEXT """* 
    - *''' TEXT '''* 
    - These triplets are all a single token
- Or use clear section titles, HTML-tags, etc.

## 'No' is also an answer! 
- To help mitigate this (partially), you can Include a reference text^[[OpenAI GPT guide](https://platform.openai.com/docs/guides/gpt-best-practices/strategy-provide-reference-text)]
- Explicitly tell the model to not answer the question if it can't.
```{python}
#| eval: false
#| echo: true
#| output: false
#| code-line-numbers: "|6-9"
f"""
ROLE: {ROLE}
TASK: {TASK_DESCRIPTION}
      Your task is to answer the question using only the provided document 
      and to cite the passage(s) of the document used to answer the question.
      If the document does not contain the information needed to answer this question 
      then simply write: 
        'Insufficient information.' 
      If an answer to the question is provided, it must be annotated with a citation. 
      Use the following format to cite relevant passages ({'citation' : …}).
      {FORMAT_OUTPUT}

DOCUMENT:
'''
{DOCUMENT}
'''
"""
```

## Give models time-to-think {.smaller}
- Allow the model to work through a problem first
- break up a task into smaller steps
```{.python}
f"""
Determine if my answer below is correct.

I'm trying to figure out how expensive my prompting of the GPT4 API will be in total.
I'm going to run around 1000 prompts. For these prompts, the average prompt-lengt is 250 words.
The average response length of the model for these prompts is 300 words. 

The API pricing is as follows:
$0.03/1k prompt tokens.
$0.06/1k sampled tokens.

We can assume that 1 token is on average 3/4th of a single word. 

I found the following answer:
18 dollars.
"""
```

```{.python code-line-numbers="|2-4"}
f"""
First work out your own solution to the problem. 
Then compare your solution to the given solution and evaluate if the given solution is correct or not. 
Don't decide if the student's solution is correct until you have done the problem yourself.

I'm trying to figure out how expensive my prompting of the GPT4 API will be in total.
I'm going to run around 1000 prompts. For these prompts, the average prompt-lengt is 250 words.
The average response length of the model for these prompts is 300 words. 

The API pricing is as follows:
$0.03/1k prompt tokens.
$0.06/1k sampled tokens.

We can assume that 1 token is on average 3/4th of a single word. 

I found the following answer:
18 dollars.
"""
```


## Take into account the order-of-operations {.smaller}
- First give calculation steps, then give the answer.
- Otherwise the model tries to retrofit the computation to the answer.

::: {.columns}
::: {.column width="50%"}
::: {style="text-align: center"}
**Bad order**
:::
<iframe style="width:100%; height:800px;" class="iframe-chatgpt" src="./webpages/Prime Numbers Multiplication.html"></iframe>

:::
::: {.column width="50%"}
::: {style="text-align: center"}
**Good order**
:::
<iframe style="width:100%; height:800px;" class="iframe-chatgpt" src="./webpages/Three Prime Numbers Multiplied.html"></iframe>

:::

:::

## Chain-of-thought prompting {.smaller}

- Some tasks are complicated for a LLM, based on just the prompt
- Give the model room to think with Chain-of-Thought prompting
- Chain-of-Thought prompting is essentially <span class="highlighted-text">single or few-shot prompting</span> for reasoning.
- What was few-shot prompting again?

:::{.fragment}
**Input**\
*Poor English input: I eated the purple berries.*\
*Good English output: I ate the purple berries.*\
*Poor English input: Thank you for picking me as your designer. I’d appreciate it.*\
*Good English output: Thank you for choosing me as your designer. I appreciate it.*\
*Poor English input: The mentioned changes have done. or I did the alteration that you*\
*requested. or I changed things you wanted and did the modifications.*\
*Good English output:*\
**output**\
The requested changes have been made. or I made the alteration that you*
*requested. or I changed things you wanted and made the modifications.^[Language Models are Few-Shot Learners: [https://arxiv.org/pdf/2005.14165.pdf](https://arxiv.org/pdf/2005.14165.pdf)]
:::

- That this works, is one of the emergent properties of LLMs

## Chain-of-thought prompting {.smaller}

- Some tasks are complicated for a LLM, based on just the prompt
- Give the model room to think with Chain-of-Thought prompting
- Chain-of-Thought prompting is essentially single or few-shot prompting for reasoning.
- Chain-of-Thought prompting demonstrates how to reason^[Chain-of-Thought Prompting Elicits Reasoning
in Large Language Models[https://arxiv.org/pdf/2201.11903.pdf
](https://arxiv.org/pdf/2201.11903.pdf
)]:

![](./figures/chain-of-thought-prompting.png)

## 0-shot Chain-of-thought prompting
You can already improve performance by just adding:\
<span class="highlighted-text"> "Let's think step by step." </span>\
at the end of a prompt^[Large Language Models are Zero-Shot Reasoners[https://arxiv.org/pdf/2205.11916.pdf](https://arxiv.org/pdf/2205.11916.pdf)]


## Mind the Context Window
- Depending on the model, the context window is between <span class="hightlight-text">10</span> and <span class="hightlight-text">200</span> pages of text
- Use 1 conversation for 1 task

## Meta-prompting {.smaller}

- Writing good prompts is time-consuming
- A meta-prompt instructs the model to write a good prompt for you:
    - It incorporates best practices and guidelines for prompting
    - It helps you get started with your prompt faster

```{python}
# | eval: false
# | echo: true
# | output: false
"""
Given a task description or existing prompt, produce a detailed system prompt to guide a language model in completing the task effectively.

# Guidelines

- Understand the Task: Grasp the main objective, goals, requirements, constraints, and expected output.
- Minimal Changes: If an existing prompt is provided, improve it only if it's simple. For complex prompts, enhance clarity and add missing elements without altering the original structure.
- Reasoning Before Conclusions**: Encourage reasoning steps before any conclusions are reached. ATTENTION! If the user provides examples where the reasoning happens afterward, REVERSE the order! NEVER START EXAMPLES WITH CONCLUSIONS!
    - Reasoning Order: Call out reasoning portions of the prompt and conclusion parts (specific fields by name). For each, determine the ORDER in which this is done, and whether it needs to be reversed.
    - Conclusion, classifications, or results should ALWAYS appear last.
- Examples: Include high-quality examples if helpful, using placeholders [in brackets] for complex elements.
   - What kinds of examples may need to be included, how many, and whether they are complex enough to benefit from placeholders.
- Clarity and Conciseness: Use clear, specific language. Avoid unnecessary instructions or bland statements.
- Formatting: Use markdown features for readability. DO NOT USE ``` CODE BLOCKS UNLESS SPECIFICALLY REQUESTED.
- Preserve User Content: If the input task or prompt includes extensive guidelines or examples, preserve them entirely, or as closely as possible. If they are vague, consider breaking down into sub-steps. Keep any details, guidelines, examples, variables, or placeholders provided by the user.
- Constants: DO include constants in the prompt, as they are not susceptible to prompt injection. Such as guides, rubrics, and examples.
- Output Format: Explicitly the most appropriate output format, in detail. This should include length and syntax (e.g. short sentence, paragraph, JSON, etc.)
    - For tasks outputting well-defined or structured data (classification, JSON, etc.) bias toward outputting a JSON.
    - JSON should never be wrapped in code blocks (```) unless explicitly requested.

The final prompt you output should adhere to the following structure below. Do not include any additional commentary, only output the completed system prompt. SPECIFICALLY, do not include any additional messages at the start or end of the prompt. (e.g. no "---")

[Concise instruction describing the task - this should be the first line in the prompt, no section header]

[Additional details as needed.]

[Optional sections with headings or bullet points for detailed steps.]

# Steps [optional]

[optional: a detailed breakdown of the steps necessary to accomplish the task]

# Output Format

[Specifically call out how the output should be formatted, be it response length, structure e.g. JSON, markdown, etc]

# Examples [optional]

[Optional: 1-3 well-defined examples with placeholders if necessary. Clearly mark where examples start and end, and what the input and output are. User placeholders as necessary.]
[If the examples are shorter than what a realistic example is expected to be, make a reference with () explaining how real examples should be longer / shorter / different. AND USE PLACEHOLDERS! ]

# Notes [optional]

[optional: edge cases, details, and an area to call or repeat out specific important considerations]
"""
```



# Prompting for image Generation {background-image="./figures/image-generation.png" background-opacity=0.45}

## Prompting for image Generation

- Dall-E 3 (also used by bing) first <span class="highlighted-text"> rewords your prompt</span>, to refine it.
    - Other image generators such as Stable-Diffusion don't do this

::: {.fragment}

::: {.columns}

::: {.column}
**User Input**\
An image of a black cat, sitting on a piano during golden hour. the image is a realistic photograph, taken by a pro photographer. The cat looks content.
:::

::: {.column}
**Dall-E Input**\
A realistic photograph of a black cat sitting on a piano. The background features a window with golden light shining through, indicative of an off-screen sunset. The cat looks content, with a relaxed posture and serene expression. The image captures the ambiance of a cozy, warmly lit room, highlighting the reflective surface of the piano and the soft, diffused sunlight.

:::

:::

:::

:::{.fragment}
![](./figures/black-cat.webp){.absolute top=100 left=0}
:::




## Tips for writing image generation prompts {.smaller}

::: {.columns}

::: {.column}

**Do's**\

(@) <span class="highlighted-text"> **Be Specific**:</span>\
 Include details about the subject, background, mood, etc.

(@) <span class="highlighted-text"> **Be descriptive**:</span>\
 Instead of saying “*a dog*” say “*a fluffy, small, brown dog.*”

(@) <span class="highlighted-text"> **Specify a style**:</span> "cubism” “watercolor painting", "In the style of starry night by Van Gogh", "photorealistic", etc.

(@) <span class="highlighted-text"> **Add search-keywords**:</span> for high quality images consider: "4k", "HD", "DSLR photography", etc

(@) <span class="highlighted-text"> **Iterate over images**:</span> Ask Dall-E to make slight changes you'd prefer

(@) <span class="highlighted-text"> **Specify the resolution**:</span> "Portait", "Widescreen", etc...

(@) <span class="highlighted-text"> **Request a specific random seed**:</span>
This reduces the variance when iterating over images.\
*GPT4o no longer generates a new random seed for each image
:::

::: {.column}

**Don'ts**\

1.  <span class="highlighted-text"> **Expect the image to perfectly match your vision**</span>\ 
The randomness in the process makes it very hard to recreate specific visions.

2.  <span class="highlighted-text"> **Don't try ask Dall-E to *Not* do something**</span>\
This will insert the keyword into the prompt and often achieves the oppossite. 

3.  <span class="highlighted-text"> **Don't add too many elements to your images**</span>\
Adherence to your prompt will suffer from this

4.  <span class="highlighted-text"> **Don't expect photorealism**</span>\
OpenAI has tuned these models to typically display a cartoony hyperrealism
:::
:::

